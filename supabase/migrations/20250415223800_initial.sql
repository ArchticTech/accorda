-- public.Admin Request Status
CREATE TYPE "public"."Admin Request Status" AS ENUM (
  'pending',
  'accept',
  'rejected'
);

-- public.Loan Status
CREATE TYPE "public"."Loan Status" AS ENUM (
  'documents',
  'validation',
  'evaluation',
  'signature',
  'depot',
  'complete'
);

-- public.Perception Status
CREATE TYPE "public"."Perception Status" AS ENUM (
  'New',
  'Negotiation',
  'Notice 7 Days',
  'Notice 72h',
  'Pre Collection',
  'Collection',
  'Loss',
  'Resolved'
);

-- public.Request Stages
CREATE TYPE "public"."Request Stages" AS ENUM (
  'Application',
  'Document',
  'Validation',
  'Evaluation',
  'Signature',
  'Deposit',
  'Express Deposit',
  'Completed',
  'Error'
);

-- public.file_treatment_type
CREATE TYPE "public"."file_treatment_type" AS ENUM (
  'normal',
  'priority'
);

-- public.gender_type
CREATE TYPE "public"."gender_type" AS ENUM (
  'male',
  'female',
  'other',
  'prefer-not-to-say'
);

-- public.income_source_type
CREATE TYPE "public"."income_source_type" AS ENUM (
  'employed',
  'saaq',
  'CSST',
  'pension',
  'invalidity',
  'insurance',
  'rqap'
);

-- public.loan_status_type
CREATE TYPE "public"."loan_status_type" AS ENUM (
  'pending',
  'reviewing documents',
  'validation',
  'evaluation',
  'signature',
  'deposit',
  'complete',
  'rejected'
);

-- public.pay_frequency_type
CREATE TYPE "public"."pay_frequency_type" AS ENUM (
  '1month',
  '2weeks',
  'bimonthly',
  '1week'
);

create table public.customers (
  id bigint generated by default as identity not null,
  created_at timestamp with time zone not null default now(),
  first_name character varying null,
  last_name character varying null,
  phone character varying null,
  email character varying null,
  auth_id uuid null,
  role text null,
  birth_date date null,
  gender public.gender_type null,
  social_insurance_number text null,
  address_line1 text null,
  address_line2 text null,
  city text null,
  province text null,
  postal_code text null,
  income_source public.income_source_type null,
  bank_institution text null,
  pay_frequency public.pay_frequency_type null,
  next_pay_date date null,
  bank_transit text null,
  bank_account text null,
  monthly_pay_amount text null,
  consumer_proposal boolean null,
  bankruptcy boolean null,
  reference1_name text null,
  reference1_phone text null,
  reference1_relationship text null,
  reference2_name text null,
  reference2_phone text null,
  reference2_relationship text null,
  constraint customers_pkey primary key (id)
) TABLESPACE pg_default;

create table public.loan_requests (
  id uuid not null,
  customer_id integer not null,
  request_date timestamp with time zone null default now(),
  birth_date date not null,
  gender public.gender_type not null,
  social_insurance_number text null,
  address_line1 text not null,
  address_line2 text null,
  city text not null,
  province text not null,
  postal_code text not null,
  income_source public.income_source_type not null,
  bank_institution text not null,
  pay_frequency public.pay_frequency_type not null,
  next_pay_date date not null,
  consumer_proposal boolean not null default false,
  bankruptcy boolean not null default false,
  file_treatment_method public.file_treatment_type not null default 'normal'::file_treatment_type,
  terms_accepted boolean not null default false,
  privacy_policy_accepted boolean not null default false,
  marketing_opt_in boolean not null default false,
  status public.loan_status_type not null default 'reviewing documents'::loan_status_type,
  status_updated_at timestamp with time zone null default now(),
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  admin_request_status public."Admin Request Status" null default 'pending'::"Admin Request Status",
  loan_id bigint null,
  request_stage public."Request Stages" not null default 'Application'::"Request Stages",
  bank_account text null,
  monthly_pay_amount text null,
  bank_transit text null,
  constraint loan_requests_pkey primary key (id)
) TABLESPACE pg_default;

create table public.loans (
  id serial not null,
  amount numeric(10, 2) not null,
  duration text not null,
  interest_rate numeric(5, 2) not null,
  description text null,
  is_active boolean null default true,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  constraint loans_pkey primary key (id)
) TABLESPACE pg_default;

create table public.perceptions (
  id bigint generated by default as identity not null,
  created_at timestamp with time zone not null default now(),
  stage public."Perception Status" null,
  loan_id integer null,
  constraint perceptions_pkey primary key (id)
) TABLESPACE pg_default;

create table public.loan_request_references (
  id bigint generated by default as identity not null,
  created_at timestamp with time zone not null default now(),
  loan_request_id uuid null,
  name text null,
  phone text null,
  relationship text null,
  reference_order smallint null
) TABLESPACE pg_default;

-- Create loan_status_history table to track status changes
CREATE TABLE IF NOT EXISTS loan_status_history (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  loan_request_id uuid NOT NULL REFERENCES public.loan_requests(id) ON DELETE CASCADE,
  status loan_status_type NOT NULL,
  notes text,
  created_by uuid REFERENCES auth.users(id),
  created_at timestamptz DEFAULT now()
);

-- Create loan_documents table
CREATE TABLE IF NOT EXISTS loan_documents (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  loan_request_id uuid NOT NULL REFERENCES public.loan_requests(id) ON DELETE CASCADE,
  document_type text NOT NULL,
  file_name text NOT NULL,
  file_path text NOT NULL,
  uploaded_by uuid REFERENCES auth.users(id),
  created_at timestamptz DEFAULT now()
);

INSERT INTO loans (
  id,
  amount,
  duration,
  interest_rate,
  description,
  is_active,
  created_at,
  updated_at
) VALUES
  (1, 400.00, '3 Months', 12.99, 'Small short-term loan', true, '2025-02-27 20:21:25.520288+00', '2025-02-27 20:21:25.520288+00'),
  (2, 600.00, '4 Months', 11.99, 'Medium short-term loan', true, '2025-02-27 20:21:25.520288+00', '2025-02-27 20:21:25.520288+00'),
  (3, 800.00, '5 Months', 10.99, 'Medium-term loan', true, '2025-02-27 20:21:25.520288+00', '2025-02-27 20:21:25.520288+00'),
  (4, 1000.00, '5 Months', 9.99, 'Standard medium-term loan', true, '2025-02-27 20:21:25.520288+00', '2025-02-27 20:21:25.520288+00'),
  (5, 1200.00, '6 Months', 9.49, 'Large medium-term loan', true, '2025-02-27 20:21:25.520288+00', '2025-02-27 20:21:25.520288+00'),
  (6, 1400.00, '6 Months', 8.99, 'Premium medium-term loan', true, '2025-02-27 20:21:25.520288+00', '2025-02-27 20:21:25.520288+00');
  
ALTER TABLE customers ENABLE ROW LEVEL SECURITY;
ALTER TABLE loans ENABLE ROW LEVEL SECURITY;
ALTER TABLE loan_requests ENABLE ROW LEVEL SECURITY;
ALTER TABLE loan_request_references ENABLE ROW LEVEL SECURITY;
ALTER TABLE loan_status_history ENABLE ROW LEVEL SECURITY;
ALTER TABLE loan_documents ENABLE ROW LEVEL SECURITY;

-- Policy to allow users to read only their own data
CREATE POLICY "Users can read own customer data"
  ON customers
  FOR SELECT
  TO authenticated
  USING (auth_id = auth.uid());

-- Policy to allow users to update only their own data
CREATE POLICY "Users can update own customer data"
  ON customers
  FOR UPDATE
  TO authenticated
  USING (auth_id = auth.uid());

-- Policy to allow users to insert their own data
CREATE POLICY "Users can insert own customer data"
  ON customers
  FOR INSERT
  TO authenticated
  WITH CHECK (auth_id = auth.uid());

  
-- Loans table policies
CREATE POLICY "Anyone can view active loans" 
  ON loans 
  FOR SELECT 
  USING (is_active = true);

CREATE POLICY "Only admins can modify loans" 
  ON loans 
  FOR ALL 
  TO authenticated 
  USING (auth.uid() IN (SELECT auth_id FROM customers WHERE role = 'admin'))
  WITH CHECK (auth.uid() IN (SELECT auth_id FROM customers WHERE role = 'admin'));

-- Loan requests policies
CREATE POLICY "Customers can view their own loan requests" 
  ON loan_requests 
  FOR SELECT 
  TO authenticated 
  USING (customer_id IN (SELECT id FROM customers WHERE auth_id = auth.uid()));

CREATE POLICY "Customers can create their own loan requests" 
  ON loan_requests 
  FOR INSERT 
  TO authenticated 
  WITH CHECK (customer_id IN (SELECT id FROM customers WHERE auth_id = auth.uid()));

CREATE POLICY "Customers can update their own pending loan requests" 
  ON loan_requests 
  FOR UPDATE 
  TO authenticated 
  USING (
    customer_id IN (SELECT id FROM customers WHERE auth_id = auth.uid()) AND 
    status = 'pending'
  );

-- References policies
CREATE POLICY "Customers can view references for their own loan requests" 
  ON loan_request_references 
  FOR SELECT 
  TO authenticated 
  USING (
    loan_request_id IN (
      SELECT id FROM loan_requests 
      WHERE customer_id IN (
        SELECT id FROM customers 
        WHERE auth_id = auth.uid()
      )
    )
  );

CREATE POLICY "Customers can create references for their own loan requests" 
  ON loan_request_references 
  FOR INSERT 
  TO authenticated 
  WITH CHECK (
    loan_request_id IN (
      SELECT id FROM loan_requests 
      WHERE customer_id IN (
        SELECT id FROM customers 
        WHERE auth_id = auth.uid()
      )
    )
  );

CREATE POLICY "Customers can update references for their own pending loan requests" 
  ON loan_request_references 
  FOR UPDATE 
  TO authenticated 
  USING (
    loan_request_id IN (
      SELECT id FROM loan_requests 
      WHERE customer_id IN (
        SELECT id FROM customers 
        WHERE auth_id = auth.uid()
      ) AND status = 'pending'
    )
  );

  -- Loan status history policies
CREATE POLICY "Customers can view status history for their own loan requests" 
  ON loan_status_history 
  FOR SELECT 
  TO authenticated 
  USING (
    loan_request_id IN (
      SELECT id FROM loan_requests 
      WHERE customer_id IN (
        SELECT id FROM customers 
        WHERE auth_id = auth.uid()
      )
    )
  );

-- Loan documents policies
CREATE POLICY "Customers can view documents for their own loan requests" 
  ON loan_documents 
  FOR SELECT 
  TO authenticated 
  USING (
    loan_request_id IN (
      SELECT id FROM loan_requests 
      WHERE customer_id IN (
        SELECT id FROM customers 
        WHERE auth_id = auth.uid()
      )
    )
  );

CREATE POLICY "Customers can upload documents for their own loan requests" 
  ON loan_documents 
  FOR INSERT 
  TO authenticated 
  WITH CHECK (
    loan_request_id IN (
      SELECT id FROM loan_requests 
      WHERE customer_id IN (
        SELECT id FROM customers 
        WHERE auth_id = auth.uid()
      )
    ) AND uploaded_by = auth.uid()
  );

-- Functions and Triggers

-- Function to update the updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
   NEW.updated_at = now();
   RETURN NEW;
END;
$$ language 'plpgsql';

-- Trigger to update the updated_at column for loan_requests
CREATE TRIGGER update_loan_requests_updated_at
BEFORE UPDATE ON loan_requests
FOR EACH ROW
EXECUTE FUNCTION update_updated_at_column();

-- Trigger to update the updated_at column for loans
CREATE TRIGGER update_loans_updated_at
BEFORE UPDATE ON loans
FOR EACH ROW
EXECUTE FUNCTION update_updated_at_column();

-- Trigger to update the updated_at column for loan_request_references
CREATE TRIGGER update_references_updated_at
BEFORE UPDATE ON loan_request_references
FOR EACH ROW
EXECUTE FUNCTION update_updated_at_column();

-- Function to record status changes in loan_status_history
CREATE OR REPLACE FUNCTION record_loan_status_change()
RETURNS TRIGGER AS $$
BEGIN
  IF OLD.status IS NULL OR NEW.status <> OLD.status THEN
    INSERT INTO loan_status_history (loan_request_id, status, created_by)
    VALUES (NEW.id, NEW.status, auth.uid());
    
    -- Update the status_updated_at timestamp
    NEW.status_updated_at = now();
  END IF;
  RETURN NEW;
END;
$$ language 'plpgsql';

-- Trigger to record status changes
CREATE TRIGGER record_loan_status_change
BEFORE UPDATE ON loan_requests
FOR EACH ROW
EXECUTE FUNCTION record_loan_status_change();

-- Function to insert initial status in loan_status_history
CREATE OR REPLACE FUNCTION record_initial_loan_status()
RETURNS TRIGGER AS $$
BEGIN
  INSERT INTO loan_status_history (loan_request_id, status, created_by)
  VALUES (NEW.id, NEW.status, auth.uid());
  RETURN NEW;
END;
$$ language 'plpgsql';

-- Trigger to record initial status
CREATE TRIGGER record_initial_loan_status
AFTER INSERT ON loan_requests
FOR EACH ROW
EXECUTE FUNCTION record_initial_loan_status();

-- Create indexes for better performance
CREATE INDEX IF NOT EXISTS idx_loan_requests_customer_id ON loan_requests(customer_id);
CREATE INDEX IF NOT EXISTS idx_loan_requests_status ON loan_requests(status);
CREATE INDEX IF NOT EXISTS idx_loan_request_references_loan_request_id ON loan_request_references(loan_request_id);
CREATE INDEX IF NOT EXISTS idx_loan_status_history_loan_request_id ON loan_status_history(loan_request_id);
CREATE INDEX IF NOT EXISTS idx_loan_documents_loan_request_id ON loan_documents(loan_request_id);